{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","days","App","useState","events","setEvents","useEffect","fetch","then","res","json","sort","a","b","startTime","className","AppBar","position","Toolbar","Typography","variant","style","color","Grid","container","direction","justify","alignItems","Tabs","minWidth","Tab","label","map","event","item","Card","background","CardActionArea","CardHeader","title","name","CardContent","description","time","d","moment","unix","tz","day","getDay","format","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,kNCOvCC,G,kBAAK,CAAC,aAAc,eAAgB,aAAc,cAAe,eAAgB,iBAAkB,gBAAiB,cAAe,kBAwDxHC,MAtDf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACRC,EADQ,KACAC,EADA,KAWb,OARAC,qBAAU,WACRC,MAAM,uCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJL,EAAUK,EAAKN,aAEhB,IACHA,EAAOO,MAAK,SAAUC,EAAEC,GAAG,OAAOD,EAAEE,UAAUD,EAAEC,aAE9C,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAACC,MAAO,WAAxC,gBACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,WAAWC,WAAW,UAC5D,kBAACC,EAAA,EAAD,CAAMP,MAAO,CAACQ,SAAU,MACtB,kBAACC,EAAA,EAAD,CAAKC,MAAM,aACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,SACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,YACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,WACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,eAKnB,kBAACZ,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAACC,MAAO,WAAxC,YACGlB,EAAO4B,KAAI,SAAAC,GAAK,OACf,6BACI,kBAACV,EAAA,EAAD,CAAMW,MAAI,GACR,kBAACC,EAAA,EAAD,CAAMpB,UAAU,OAAOM,MAAO,CAACe,WAAY,gBACvC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAON,EAAMO,KAAMnB,MAAO,CAACC,MAAO,WAC9C,kBAACmB,EAAA,EAAD,KACE,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAO,CAACC,MAAO,UAAWW,EAAMS,aAChE,kBAACvB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAACC,MAAO,UAchE,SAAgBqB,GACd,IAAMC,EAAIC,IAAOC,KAAKH,GAAMI,GAAG,mBAAmBC,MAClD,OAAO/C,GAAM2C,EAAI,GAAK,GAhBmDK,CAAOhB,EAAMnB,WAAhE,KAWP6B,EAX4FV,EAAMnB,UAY1G+B,IAAOC,KAAKH,GAAMI,GAAG,mBAAmBG,OAAO,iBADxD,IAAiBP,KAJX,kBAAC3B,EAAA,EAAD,CAAQC,SAAS,aCxCHkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ac77d8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport { Card, Typography, CardActionArea, CardContent, CardHeader, CardMedia, Grid, AppBar, Toolbar, Tab, Tabs, Icon } from '@material-ui/core'\nimport moment from 'moment';\nimport 'moment-timezone';\nimport logo from './logo.svg';\nimport './App.css';\n\nvar days=[\"Friday 8/7\", \"Saturday 8/8\", \"Sunday 8/9\", \"Monday 8/10\", \"Tuesday 8/11\", \"Wednesday 8/12\", \"Thursday 8/13\", \"Friday 8/14\", \"Saturday 8/15\"];\n\nfunction App() {\n  let [events, setEvents]=useState([]);\n\n  useEffect(()=>{\n    fetch('https://api.hackillinois.org/event/')\n    .then(res => res.json())\n    .then(json => {\n      setEvents(json.events)\n    })\n  }, [])\n  events.sort(function (a,b){return a.startTime-b.startTime});\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h4\" style={{color: \"orange\"}}>HackIllinois</Typography>\n          <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\n            <Tabs style={{minWidth: 250}}>\n              <Tab label=\"Schedule\"/>\n              <Tab label=\"Maps\"/>\n              <Tab label=\"Mentors\"/>\n              <Tab label=\"Prizes\"/>\n              <Tab label=\"Travel\"/>\n            </Tabs>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      <Typography variant=\"h2\" style={{color: \"orange\"}}>Schedule</Typography>\n        {events.map(event => (\n          <div>\n              <Grid item>\n                <Card className=\"card\" style={{background: \"transparent\"}}>\n                    <CardActionArea>\n                      <CardHeader title={event.name} style={{color: \"white\"}}/>\n                      <CardContent>\n                        <Typography variant=\"subtitle1\" style={{color: \"white\"}}>{event.description}</Typography>\n                        <Typography variant=\"h6\" style={{color: \"white\"}}>{getDay(event.startTime)} {getTime(event.startTime)}</Typography>\n                      </CardContent>\n                    </CardActionArea>\n                </Card>\n              </Grid>\n          </div>\n        ))}\n      <AppBar position=\"static\"></AppBar>\n    </div>\n  );\n}\nfunction getTime(time){\n  return moment.unix(time).tz('America/Chicago').format('h:mm a');\n}\nfunction getDay(time){\n  const d = moment.unix(time).tz('America/Chicago').day();\n  return days[(d + 2) % 9];\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}